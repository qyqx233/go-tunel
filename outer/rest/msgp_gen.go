package rest

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *TransportPdb) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Enable":
			z.Enable, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Enable")
				return
			}
		case "Export":
			z.Export, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Export")
				return
			}
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TransportPdb) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Enable"
	err = en.Append(0x83, 0xa6, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Enable)
	if err != nil {
		err = msgp.WrapError(err, "Enable")
		return
	}
	// write "Export"
	err = en.Append(0xa6, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Export)
	if err != nil {
		err = msgp.WrapError(err, "Export")
		return
	}
	// write "Name"
	err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TransportPdb) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Enable"
	o = append(o, 0x83, 0xa6, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65)
	o = msgp.AppendBool(o, z.Enable)
	// string "Export"
	o = append(o, 0xa6, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74)
	o = msgp.AppendBool(o, z.Export)
	// string "Name"
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TransportPdb) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Enable":
			z.Enable, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Enable")
				return
			}
		case "Export":
			z.Export, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Export")
				return
			}
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TransportPdb) Msgsize() (s int) {
	s = 1 + 7 + msgp.BoolSize + 7 + msgp.BoolSize + 5 + msgp.StringPrefixSize + len(z.Name)
	return
}
